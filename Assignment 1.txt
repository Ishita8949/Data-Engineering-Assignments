Q1)  https://www.hackerrank.com/challenges/python-arithmetic-operators/problem?isFullScreen=true

Solution: 
 
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    c=a+b;
    d=a-b;
    e=a*b;
    print(c)
    print(d)
    print(e)



Q2)  https://www.hackerrank.com/challenges/compress-the-string/problem?isFullScreen=true

Solution:

from itertools import groupby


if __name__ == '__main__':
    s = input().rstrip()
    s_grouped = list((len(list(g)), int(k)) for k, g in groupby(s))
    for c in s_grouped:
        print(c, end=' ')



Q3) https://www.hackerrank.com/challenges/the-minion-game/problem?isFullScreen=true

Solution: 

def minion_game(string: str) -> None:
    # your code goes here
    p1 = 0
    p2 = 0
    vowels = ('A', 'E', 'I', 'O', 'U')
    str_len = len(string)
    for i in range(str_len):
        if string[i] not in vowels:
            p1 += str_len - i
        else:
            p2 += str_len - i
    if p1 > p2:
        print('Stuart', p1)
    elif p1 < p2:
        print('Kevin', p2)
    else:
        print('Draw')



Q4) https://www.hackerrank.com/challenges/write-a-function/problem?isFullScreen=true

Solution:

def is_leap(year):
    leap = False
    
    if year % 4 == 0:
        if year % 100 == 0 and year % 400 == 0:
            leap = True
        elif year in [1800, 2100, 2200, 2300, 2500]:
            leap = False
        else:
            leap = True
    return leap



Q5) https://www.hackerrank.com/challenges/iterables-and-iterators/problem?isFullScreen=true

Solution:

from itertools import combinations


if __name__ == '__main__':
    n = int(input().rstrip())
    letters = input().rstrip().split()
    k = int(input().rstrip())
    combs = list(combinations(letters, k))
    num_of_a = 0
    for c in combs:
        if 'a' in c:
            num_of_a += 1
    print(round(num_of_a / len(combs), 12))



Q6) https://www.hackerrank.com/challenges/python-tuples/problem?isFullScreen=true


Solution: 

if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    ls = list(integer_list)
    t = ()
    for i in ls:
        t += (i,)
    
    hashed = hash(t)
    print(hashed)



Q7) https://www.hackerrank.com/challenges/finding-the-percentage/problem?isFullScreen=true

Solution: 

if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    
    
    def mean(list):
        x = 0
        for i in list:
            x += i
        w = (x/len(list))
        return "%.2f" % w
    q = mean(student_marks[query_name])
    print(q)



Q8) https://www.hackerrank.com/challenges/python-string-formatting/problem?isFullScreen=true

Solution: 

def print_formatted(number: int) -> None:
   
    pad = len(bin(number)[2:])
    for i in range(1, number + 1):
        print(str(i).rjust(pad), str(oct(i))[2:].rjust(pad), str(hex(i))[2:].rjust(pad).upper(), str(bin(i)[2:]).rjust(pad))

    














